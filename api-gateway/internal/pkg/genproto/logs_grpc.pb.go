// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: internal/pkg/scripts/submodule/logs.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LogService_Create_FullMethodName    = "/protos.LogService/Create"
	LogService_GetDetail_FullMethodName = "/protos.LogService/GetDetail"
	LogService_Update_FullMethodName    = "/protos.LogService/Update"
	LogService_Delete_FullMethodName    = "/protos.LogService/Delete"
	LogService_GetList_FullMethodName   = "/protos.LogService/GetList"
)

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	Create(ctx context.Context, in *LogCreateRequest, opts ...grpc.CallOption) (*LogCreateResponse, error)
	GetDetail(ctx context.Context, in *GetId, opts ...grpc.CallOption) (*LogGetResponse, error)
	Update(ctx context.Context, in *LogUpdateRequest, opts ...grpc.CallOption) (*LogVoid, error)
	Delete(ctx context.Context, in *GetId, opts ...grpc.CallOption) (*LogVoid, error)
	GetList(ctx context.Context, in *FilterLog, opts ...grpc.CallOption) (*LogGetAll, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) Create(ctx context.Context, in *LogCreateRequest, opts ...grpc.CallOption) (*LogCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogCreateResponse)
	err := c.cc.Invoke(ctx, LogService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetDetail(ctx context.Context, in *GetId, opts ...grpc.CallOption) (*LogGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogGetResponse)
	err := c.cc.Invoke(ctx, LogService_GetDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) Update(ctx context.Context, in *LogUpdateRequest, opts ...grpc.CallOption) (*LogVoid, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogVoid)
	err := c.cc.Invoke(ctx, LogService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) Delete(ctx context.Context, in *GetId, opts ...grpc.CallOption) (*LogVoid, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogVoid)
	err := c.cc.Invoke(ctx, LogService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetList(ctx context.Context, in *FilterLog, opts ...grpc.CallOption) (*LogGetAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogGetAll)
	err := c.cc.Invoke(ctx, LogService_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	Create(context.Context, *LogCreateRequest) (*LogCreateResponse, error)
	GetDetail(context.Context, *GetId) (*LogGetResponse, error)
	Update(context.Context, *LogUpdateRequest) (*LogVoid, error)
	Delete(context.Context, *GetId) (*LogVoid, error)
	GetList(context.Context, *FilterLog) (*LogGetAll, error)
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) Create(context.Context, *LogCreateRequest) (*LogCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLogServiceServer) GetDetail(context.Context, *GetId) (*LogGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedLogServiceServer) Update(context.Context, *LogUpdateRequest) (*LogVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLogServiceServer) Delete(context.Context, *GetId) (*LogVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLogServiceServer) GetList(context.Context, *FilterLog) (*LogGetAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).Create(ctx, req.(*LogCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_GetDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetDetail(ctx, req.(*GetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).Update(ctx, req.(*LogUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).Delete(ctx, req.(*GetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetList(ctx, req.(*FilterLog))
	}
	return interceptor(ctx, in, info, handler)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LogService_Create_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _LogService_GetDetail_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LogService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LogService_Delete_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _LogService_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pkg/scripts/submodule/logs.proto",
}
